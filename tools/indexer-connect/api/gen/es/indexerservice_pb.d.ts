// @generated by protoc-gen-es v1.8.0
// @generated from file indexerservice.proto (package land.gno.gnosocial.indexerservice.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * The ErrCode enum defines errors for gRPC API functions. These are converted
 * from the Go error types returned by gnoclient.
 *
 * ----------------
 * Special errors
 * ----------------
 *
 * @generated from enum land.gno.gnosocial.indexerservice.v1.ErrCode
 */
export declare enum ErrCode {
  /**
   * Undefined is the default value. It should never be set manually
   *
   * @generated from enum value: Undefined = 0;
   */
  Undefined = 0,

  /**
   * TODO indicates that you plan to create an error later
   *
   * @generated from enum value: TODO = 1;
   */
  TODO = 1,

  /**
   * ErrNotImplemented indicates that a method is not implemented yet
   *
   * @generated from enum value: ErrNotImplemented = 2;
   */
  ErrNotImplemented = 2,

  /**
   * ErrInternal indicates an unknown error (without Code), i.e. in gRPC
   *
   * @generated from enum value: ErrInternal = 3;
   */
  ErrInternal = 3,

  /**
   * @generated from enum value: ErrInvalidInput = 100;
   */
  ErrInvalidInput = 100,

  /**
   * @generated from enum value: ErrMissingInput = 101;
   */
  ErrMissingInput = 101,

  /**
   * @generated from enum value: ErrSerialization = 102;
   */
  ErrSerialization = 102,

  /**
   * @generated from enum value: ErrDeserialization = 103;
   */
  ErrDeserialization = 103,

  /**
   * @generated from enum value: ErrInitService = 104;
   */
  ErrInitService = 104,

  /**
   * @generated from enum value: ErrRunGRPCServer = 105;
   */
  ErrRunGRPCServer = 105,
}

/**
 * @generated from message land.gno.gnosocial.indexerservice.v1.HelloRequest
 */
export declare class HelloRequest extends Message<HelloRequest> {
  /**
   * @generated from field: string name = 1 [json_name = "Name"];
   */
  name: string;

  constructor(data?: PartialMessage<HelloRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "land.gno.gnosocial.indexerservice.v1.HelloRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HelloRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HelloRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HelloRequest;

  static equals(a: HelloRequest | PlainMessage<HelloRequest> | undefined, b: HelloRequest | PlainMessage<HelloRequest> | undefined): boolean;
}

/**
 * @generated from message land.gno.gnosocial.indexerservice.v1.HelloResponse
 */
export declare class HelloResponse extends Message<HelloResponse> {
  /**
   * @generated from field: string greeting = 1 [json_name = "Greeting"];
   */
  greeting: string;

  constructor(data?: PartialMessage<HelloResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "land.gno.gnosocial.indexerservice.v1.HelloResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HelloResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HelloResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HelloResponse;

  static equals(a: HelloResponse | PlainMessage<HelloResponse> | undefined, b: HelloResponse | PlainMessage<HelloResponse> | undefined): boolean;
}

/**
 * @generated from message land.gno.gnosocial.indexerservice.v1.HelloStreamRequest
 */
export declare class HelloStreamRequest extends Message<HelloStreamRequest> {
  /**
   * @generated from field: string name = 1 [json_name = "Name"];
   */
  name: string;

  constructor(data?: PartialMessage<HelloStreamRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "land.gno.gnosocial.indexerservice.v1.HelloStreamRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HelloStreamRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HelloStreamRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HelloStreamRequest;

  static equals(a: HelloStreamRequest | PlainMessage<HelloStreamRequest> | undefined, b: HelloStreamRequest | PlainMessage<HelloStreamRequest> | undefined): boolean;
}

/**
 * @generated from message land.gno.gnosocial.indexerservice.v1.HelloStreamResponse
 */
export declare class HelloStreamResponse extends Message<HelloStreamResponse> {
  /**
   * @generated from field: string greeting = 1 [json_name = "Greeting"];
   */
  greeting: string;

  constructor(data?: PartialMessage<HelloStreamResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "land.gno.gnosocial.indexerservice.v1.HelloStreamResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HelloStreamResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HelloStreamResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HelloStreamResponse;

  static equals(a: HelloStreamResponse | PlainMessage<HelloStreamResponse> | undefined, b: HelloStreamResponse | PlainMessage<HelloStreamResponse> | undefined): boolean;
}

/**
 * @generated from message land.gno.gnosocial.indexerservice.v1.ErrDetails
 */
export declare class ErrDetails extends Message<ErrDetails> {
  /**
   * @generated from field: repeated land.gno.gnosocial.indexerservice.v1.ErrCode codes = 1;
   */
  codes: ErrCode[];

  constructor(data?: PartialMessage<ErrDetails>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "land.gno.gnosocial.indexerservice.v1.ErrDetails";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ErrDetails;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ErrDetails;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ErrDetails;

  static equals(a: ErrDetails | PlainMessage<ErrDetails> | undefined, b: ErrDetails | PlainMessage<ErrDetails> | undefined): boolean;
}

