// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package main

import (
	"context"
	"encoding/json"
	"errors"

	"github.com/Khan/genqlient/graphql"
)

// __getTransactionsInput is used internally by genqlient
type __getTransactionsInput struct {
	Caller string `json:"caller"`
}

// GetCaller returns __getTransactionsInput.Caller, and is useful for accessing the field via an interface.
func (v *__getTransactionsInput) GetCaller() string { return v.Caller }

// getTransactionsResponse is returned by getTransactions on success.
type getTransactionsResponse struct {
	// Retrieves a list of Transactions that match the given filter criteria. If the result is incomplete due to errors, both partial results and errors are returned.
	Transactions []getTransactionsTransactionsTransaction `json:"transactions"`
}

// GetTransactions returns getTransactionsResponse.Transactions, and is useful for accessing the field via an interface.
func (v *getTransactionsResponse) GetTransactions() []getTransactionsTransactionsTransaction {
	return v.Transactions
}

// getTransactionsTransactionsTransaction includes the requested fields of the GraphQL type Transaction.
// The GraphQL type's documentation follows.
//
// Defines a transaction within a block, detailing its execution specifics and content.
type getTransactionsTransactionsTransaction struct {
	// Hash from Transaction content in base64 encoding.
	Hash string `json:"hash"`
}

// GetHash returns getTransactionsTransactionsTransaction.Hash, and is useful for accessing the field via an interface.
func (v *getTransactionsTransactionsTransaction) GetHash() string { return v.Hash }

// subscribeBlocksBlocksBlock includes the requested fields of the GraphQL type Block.
// The GraphQL type's documentation follows.
//
// Represents a blockchain block with various attributes detailing its creation and content.
type subscribeBlocksBlocksBlock struct {
	// A unique identifier for the Block determined by its position in the blockchain.
	// This integer is strictly increasing with each new Block.
	Height int `json:"height"`
}

// GetHeight returns subscribeBlocksBlocksBlock.Height, and is useful for accessing the field via an interface.
func (v *subscribeBlocksBlocksBlock) GetHeight() int { return v.Height }

// subscribeBlocksResponse is returned by subscribeBlocks on success.
type subscribeBlocksResponse struct {
	// Subscribes to real-time updates of Blocks that match the provided filter criteria. Similar to the Transactions subscription,
	// this subscription is active immediately upon creation and only includes Blocks added after the subscription begins.
	//
	// This subscription is ideal for services that need to be notified of new Blocks for processing or analysis, such as block explorers,
	// data aggregators, or security monitoring tools.
	//
	// Returns:
	// - Block: Each update consists of a Block object that satisfies the filter criteria, allowing subscribers to process or analyze new Blocks in real time.
	Blocks subscribeBlocksBlocksBlock `json:"blocks"`
}

// GetBlocks returns subscribeBlocksResponse.Blocks, and is useful for accessing the field via an interface.
func (v *subscribeBlocksResponse) GetBlocks() subscribeBlocksBlocksBlock { return v.Blocks }

// The query executed by getTransactions.
const getTransactions_Operation = `
query getTransactions ($caller: String!) {
	transactions(filter: {message:{vm_param:{exec:{func:"Follow",pkg_path:"gno.land/r/berty/social",caller:$caller}}}}) {
		hash
	}
}
`

func getTransactions(
	ctx_ context.Context,
	client_ graphql.Client,
	caller string,
) (data_ *getTransactionsResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "getTransactions",
		Query:  getTransactions_Operation,
		Variables: &__getTransactionsInput{
			Caller: caller,
		},
	}

	data_ = &getTransactionsResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The subscription executed by subscribeBlocks.
const subscribeBlocks_Operation = `
subscription subscribeBlocks {
	blocks(filter: {}) {
		height
	}
}
`

// To unsubscribe, use [graphql.WebSocketClient.Unsubscribe]
func subscribeBlocks(
	ctx_ context.Context,
	client_ graphql.WebSocketClient,
) (dataChan_ chan subscribeBlocksWsResponse, subscriptionID_ string, err_ error) {
	req_ := &graphql.Request{
		OpName: "subscribeBlocks",
		Query:  subscribeBlocks_Operation,
	}

	dataChan_ = make(chan subscribeBlocksWsResponse)
	subscriptionID_, err_ = client_.Subscribe(req_, dataChan_, subscribeBlocksForwardData)

	return dataChan_, subscriptionID_, err_
}

type subscribeBlocksWsResponse struct {
	Data       *subscribeBlocksResponse `json:"data"`
	Extensions map[string]interface{}   `json:"extensions,omitempty"`
	Errors     error                    `json:"errors"`
}

func subscribeBlocksForwardData(interfaceChan interface{}, jsonRawMsg json.RawMessage) error {
	var gqlResp graphql.Response
	var wsResp subscribeBlocksWsResponse
	err := json.Unmarshal(jsonRawMsg, &gqlResp)
	if err != nil {
		return err
	}
	if len(gqlResp.Errors) == 0 {
		err = json.Unmarshal(jsonRawMsg, &wsResp)
		if err != nil {
			return err
		}
	} else {
		wsResp.Errors = gqlResp.Errors
	}
	dataChan_, ok := interfaceChan.(chan subscribeBlocksWsResponse)
	if !ok {
		return errors.New("failed to cast interface into 'chan subscribeBlocksWsResponse'")
	}
	dataChan_ <- wsResp
	return nil
}
