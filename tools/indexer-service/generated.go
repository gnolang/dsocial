// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package main

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"

	"github.com/Khan/genqlient/graphql"
)

// CallInfo includes the GraphQL fields of Transaction requested by the fragment CallInfo.
// The GraphQL type's documentation follows.
//
// Defines a transaction within a block, detailing its execution specifics and content.
type CallInfo struct {
	// The payload of a message shows the contents of the messages in a transaction.
	// A message consists of `router`, `type`, and `value` (whose form depends on the `router` and `type`).
	Messages []CallInfoMessagesTransactionMessage `json:"messages"`
	// `response` is the processing result of the transaction.
	// It has `log`, `info`, `error`, and `data`.
	Response CallInfoResponseTransactionResponse `json:"response"`
}

// GetMessages returns CallInfo.Messages, and is useful for accessing the field via an interface.
func (v *CallInfo) GetMessages() []CallInfoMessagesTransactionMessage { return v.Messages }

// GetResponse returns CallInfo.Response, and is useful for accessing the field via an interface.
func (v *CallInfo) GetResponse() CallInfoResponseTransactionResponse { return v.Response }

// CallInfoMessagesTransactionMessage includes the requested fields of the GraphQL type TransactionMessage.
type CallInfoMessagesTransactionMessage struct {
	// MessageValue is the content of the transaction.
	// `value` can be of type `BankMsgSend`, `MsgCall`, `MsgAddPackage`, `MsgRun`, `UnexpectedMessage`.
	Value CallInfoMessagesTransactionMessageValue `json:"-"`
}

// GetValue returns CallInfoMessagesTransactionMessage.Value, and is useful for accessing the field via an interface.
func (v *CallInfoMessagesTransactionMessage) GetValue() CallInfoMessagesTransactionMessageValue {
	return v.Value
}

func (v *CallInfoMessagesTransactionMessage) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CallInfoMessagesTransactionMessage
		Value json.RawMessage `json:"value"`
		graphql.NoUnmarshalJSON
	}
	firstPass.CallInfoMessagesTransactionMessage = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Value
		src := firstPass.Value
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalCallInfoMessagesTransactionMessageValue(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal CallInfoMessagesTransactionMessage.Value: %w", err)
			}
		}
	}
	return nil
}

type __premarshalCallInfoMessagesTransactionMessage struct {
	Value json.RawMessage `json:"value"`
}

func (v *CallInfoMessagesTransactionMessage) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CallInfoMessagesTransactionMessage) __premarshalJSON() (*__premarshalCallInfoMessagesTransactionMessage, error) {
	var retval __premarshalCallInfoMessagesTransactionMessage

	{

		dst := &retval.Value
		src := v.Value
		var err error
		*dst, err = __marshalCallInfoMessagesTransactionMessageValue(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal CallInfoMessagesTransactionMessage.Value: %w", err)
		}
	}
	return &retval, nil
}

// CallInfoMessagesTransactionMessageValue includes the requested fields of the GraphQL interface MessageValue.
//
// CallInfoMessagesTransactionMessageValue is implemented by the following types:
// CallInfoMessagesTransactionMessageValueBankMsgSend
// CallInfoMessagesTransactionMessageValueMsgAddPackage
// CallInfoMessagesTransactionMessageValueMsgCall
// CallInfoMessagesTransactionMessageValueMsgRun
// CallInfoMessagesTransactionMessageValueUnexpectedMessage
type CallInfoMessagesTransactionMessageValue interface {
	implementsGraphQLInterfaceCallInfoMessagesTransactionMessageValue()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
}

func (v *CallInfoMessagesTransactionMessageValueBankMsgSend) implementsGraphQLInterfaceCallInfoMessagesTransactionMessageValue() {
}
func (v *CallInfoMessagesTransactionMessageValueMsgAddPackage) implementsGraphQLInterfaceCallInfoMessagesTransactionMessageValue() {
}
func (v *CallInfoMessagesTransactionMessageValueMsgCall) implementsGraphQLInterfaceCallInfoMessagesTransactionMessageValue() {
}
func (v *CallInfoMessagesTransactionMessageValueMsgRun) implementsGraphQLInterfaceCallInfoMessagesTransactionMessageValue() {
}
func (v *CallInfoMessagesTransactionMessageValueUnexpectedMessage) implementsGraphQLInterfaceCallInfoMessagesTransactionMessageValue() {
}

func __unmarshalCallInfoMessagesTransactionMessageValue(b []byte, v *CallInfoMessagesTransactionMessageValue) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "BankMsgSend":
		*v = new(CallInfoMessagesTransactionMessageValueBankMsgSend)
		return json.Unmarshal(b, *v)
	case "MsgAddPackage":
		*v = new(CallInfoMessagesTransactionMessageValueMsgAddPackage)
		return json.Unmarshal(b, *v)
	case "MsgCall":
		*v = new(CallInfoMessagesTransactionMessageValueMsgCall)
		return json.Unmarshal(b, *v)
	case "MsgRun":
		*v = new(CallInfoMessagesTransactionMessageValueMsgRun)
		return json.Unmarshal(b, *v)
	case "UnexpectedMessage":
		*v = new(CallInfoMessagesTransactionMessageValueUnexpectedMessage)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing MessageValue.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for CallInfoMessagesTransactionMessageValue: "%v"`, tn.TypeName)
	}
}

func __marshalCallInfoMessagesTransactionMessageValue(v *CallInfoMessagesTransactionMessageValue) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *CallInfoMessagesTransactionMessageValueBankMsgSend:
		typename = "BankMsgSend"

		result := struct {
			TypeName string `json:"__typename"`
			*CallInfoMessagesTransactionMessageValueBankMsgSend
		}{typename, v}
		return json.Marshal(result)
	case *CallInfoMessagesTransactionMessageValueMsgAddPackage:
		typename = "MsgAddPackage"

		result := struct {
			TypeName string `json:"__typename"`
			*CallInfoMessagesTransactionMessageValueMsgAddPackage
		}{typename, v}
		return json.Marshal(result)
	case *CallInfoMessagesTransactionMessageValueMsgCall:
		typename = "MsgCall"

		result := struct {
			TypeName string `json:"__typename"`
			*CallInfoMessagesTransactionMessageValueMsgCall
		}{typename, v}
		return json.Marshal(result)
	case *CallInfoMessagesTransactionMessageValueMsgRun:
		typename = "MsgRun"

		result := struct {
			TypeName string `json:"__typename"`
			*CallInfoMessagesTransactionMessageValueMsgRun
		}{typename, v}
		return json.Marshal(result)
	case *CallInfoMessagesTransactionMessageValueUnexpectedMessage:
		typename = "UnexpectedMessage"

		result := struct {
			TypeName string `json:"__typename"`
			*CallInfoMessagesTransactionMessageValueUnexpectedMessage
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for CallInfoMessagesTransactionMessageValue: "%T"`, v)
	}
}

// CallInfoMessagesTransactionMessageValueBankMsgSend includes the requested fields of the GraphQL type BankMsgSend.
// The GraphQL type's documentation follows.
//
// `BankMsgSend` is a message with a message router of `bank` and a message type of `send`.
// `BankMsgSend` is the fund transfer tx message.
type CallInfoMessagesTransactionMessageValueBankMsgSend struct {
	Typename string `json:"__typename"`
}

// GetTypename returns CallInfoMessagesTransactionMessageValueBankMsgSend.Typename, and is useful for accessing the field via an interface.
func (v *CallInfoMessagesTransactionMessageValueBankMsgSend) GetTypename() string { return v.Typename }

// CallInfoMessagesTransactionMessageValueMsgAddPackage includes the requested fields of the GraphQL type MsgAddPackage.
// The GraphQL type's documentation follows.
//
// `MsgAddPackage` is a message with a message router of `vm` and a message type of `add_package`.
// `MsgAddPackage` is the package deployment tx message.
type CallInfoMessagesTransactionMessageValueMsgAddPackage struct {
	Typename string `json:"__typename"`
}

// GetTypename returns CallInfoMessagesTransactionMessageValueMsgAddPackage.Typename, and is useful for accessing the field via an interface.
func (v *CallInfoMessagesTransactionMessageValueMsgAddPackage) GetTypename() string {
	return v.Typename
}

// CallInfoMessagesTransactionMessageValueMsgCall includes the requested fields of the GraphQL type MsgCall.
// The GraphQL type's documentation follows.
//
// `MsgCall` is a message with a message router of `vm` and a message type of `exec`.
// `MsgCall` is the method invocation tx message.
type CallInfoMessagesTransactionMessageValueMsgCall struct {
	Typename string `json:"__typename"`
	// the function name being invoked.
	Func string `json:"func"`
	// the bech32 address of the function caller.
	// ex) `g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5`
	Caller string `json:"caller"`
	// `args` are the arguments passed to the executed function.
	Args []string `json:"args"`
}

// GetTypename returns CallInfoMessagesTransactionMessageValueMsgCall.Typename, and is useful for accessing the field via an interface.
func (v *CallInfoMessagesTransactionMessageValueMsgCall) GetTypename() string { return v.Typename }

// GetFunc returns CallInfoMessagesTransactionMessageValueMsgCall.Func, and is useful for accessing the field via an interface.
func (v *CallInfoMessagesTransactionMessageValueMsgCall) GetFunc() string { return v.Func }

// GetCaller returns CallInfoMessagesTransactionMessageValueMsgCall.Caller, and is useful for accessing the field via an interface.
func (v *CallInfoMessagesTransactionMessageValueMsgCall) GetCaller() string { return v.Caller }

// GetArgs returns CallInfoMessagesTransactionMessageValueMsgCall.Args, and is useful for accessing the field via an interface.
func (v *CallInfoMessagesTransactionMessageValueMsgCall) GetArgs() []string { return v.Args }

// CallInfoMessagesTransactionMessageValueMsgRun includes the requested fields of the GraphQL type MsgRun.
// The GraphQL type's documentation follows.
//
// `MsgRun` is a message with a message router of `vm` and a message type of `run`.
// `MsgRun is the execute arbitrary Gno code tx message`.
type CallInfoMessagesTransactionMessageValueMsgRun struct {
	Typename string `json:"__typename"`
}

// GetTypename returns CallInfoMessagesTransactionMessageValueMsgRun.Typename, and is useful for accessing the field via an interface.
func (v *CallInfoMessagesTransactionMessageValueMsgRun) GetTypename() string { return v.Typename }

// CallInfoMessagesTransactionMessageValueUnexpectedMessage includes the requested fields of the GraphQL type UnexpectedMessage.
// The GraphQL type's documentation follows.
//
// `UnexpectedMessage` is an Undefined Message, which is a message that decoding failed.
type CallInfoMessagesTransactionMessageValueUnexpectedMessage struct {
	Typename string `json:"__typename"`
}

// GetTypename returns CallInfoMessagesTransactionMessageValueUnexpectedMessage.Typename, and is useful for accessing the field via an interface.
func (v *CallInfoMessagesTransactionMessageValueUnexpectedMessage) GetTypename() string {
	return v.Typename
}

// CallInfoResponseTransactionResponse includes the requested fields of the GraphQL type TransactionResponse.
// The GraphQL type's documentation follows.
//
// `TransactionResponse` is the processing result of the transaction.
// It has `log`, `info`, `error`, and `data`.
type CallInfoResponseTransactionResponse struct {
	// The response data associated with the Transaction execution, if any.
	Data string `json:"data"`
}

// GetData returns CallInfoResponseTransactionResponse.Data, and is useful for accessing the field via an interface.
func (v *CallInfoResponseTransactionResponse) GetData() string { return v.Data }

// getTransactionsResponse is returned by getTransactions on success.
type getTransactionsResponse struct {
	// Retrieves a list of Transactions that match the given filter criteria. If the result is incomplete due to errors, both partial results and errors are returned.
	Transactions []getTransactionsTransactionsTransaction `json:"transactions"`
}

// GetTransactions returns getTransactionsResponse.Transactions, and is useful for accessing the field via an interface.
func (v *getTransactionsResponse) GetTransactions() []getTransactionsTransactionsTransaction {
	return v.Transactions
}

// getTransactionsTransactionsTransaction includes the requested fields of the GraphQL type Transaction.
// The GraphQL type's documentation follows.
//
// Defines a transaction within a block, detailing its execution specifics and content.
type getTransactionsTransactionsTransaction struct {
	CallInfo `json:"-"`
}

// GetMessages returns getTransactionsTransactionsTransaction.Messages, and is useful for accessing the field via an interface.
func (v *getTransactionsTransactionsTransaction) GetMessages() []CallInfoMessagesTransactionMessage {
	return v.CallInfo.Messages
}

// GetResponse returns getTransactionsTransactionsTransaction.Response, and is useful for accessing the field via an interface.
func (v *getTransactionsTransactionsTransaction) GetResponse() CallInfoResponseTransactionResponse {
	return v.CallInfo.Response
}

func (v *getTransactionsTransactionsTransaction) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getTransactionsTransactionsTransaction
		graphql.NoUnmarshalJSON
	}
	firstPass.getTransactionsTransactionsTransaction = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.CallInfo)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetTransactionsTransactionsTransaction struct {
	Messages []CallInfoMessagesTransactionMessage `json:"messages"`

	Response CallInfoResponseTransactionResponse `json:"response"`
}

func (v *getTransactionsTransactionsTransaction) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getTransactionsTransactionsTransaction) __premarshalJSON() (*__premarshalgetTransactionsTransactionsTransaction, error) {
	var retval __premarshalgetTransactionsTransactionsTransaction

	retval.Messages = v.CallInfo.Messages
	retval.Response = v.CallInfo.Response
	return &retval, nil
}

// subscribeTransactionsResponse is returned by subscribeTransactions on success.
type subscribeTransactionsResponse struct {
	// Subscribes to real-time updates of Transactions that match the provided filter criteria.
	// This subscription starts immediately and only includes Transactions added to the blockchain after the subscription is active.
	//
	// This is useful for applications needing to track Transactions in real-time, such as wallets tracking incoming transactions
	// or analytics platforms monitoring blockchain activity.
	//
	// Returns:
	// - Transaction: Each received update is a Transaction object that matches the filter criteria.
	Transactions subscribeTransactionsTransactionsTransaction `json:"transactions"`
}

// GetTransactions returns subscribeTransactionsResponse.Transactions, and is useful for accessing the field via an interface.
func (v *subscribeTransactionsResponse) GetTransactions() subscribeTransactionsTransactionsTransaction {
	return v.Transactions
}

// subscribeTransactionsTransactionsTransaction includes the requested fields of the GraphQL type Transaction.
// The GraphQL type's documentation follows.
//
// Defines a transaction within a block, detailing its execution specifics and content.
type subscribeTransactionsTransactionsTransaction struct {
	CallInfo `json:"-"`
}

// GetMessages returns subscribeTransactionsTransactionsTransaction.Messages, and is useful for accessing the field via an interface.
func (v *subscribeTransactionsTransactionsTransaction) GetMessages() []CallInfoMessagesTransactionMessage {
	return v.CallInfo.Messages
}

// GetResponse returns subscribeTransactionsTransactionsTransaction.Response, and is useful for accessing the field via an interface.
func (v *subscribeTransactionsTransactionsTransaction) GetResponse() CallInfoResponseTransactionResponse {
	return v.CallInfo.Response
}

func (v *subscribeTransactionsTransactionsTransaction) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*subscribeTransactionsTransactionsTransaction
		graphql.NoUnmarshalJSON
	}
	firstPass.subscribeTransactionsTransactionsTransaction = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.CallInfo)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalsubscribeTransactionsTransactionsTransaction struct {
	Messages []CallInfoMessagesTransactionMessage `json:"messages"`

	Response CallInfoResponseTransactionResponse `json:"response"`
}

func (v *subscribeTransactionsTransactionsTransaction) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *subscribeTransactionsTransactionsTransaction) __premarshalJSON() (*__premarshalsubscribeTransactionsTransactionsTransaction, error) {
	var retval __premarshalsubscribeTransactionsTransactionsTransaction

	retval.Messages = v.CallInfo.Messages
	retval.Response = v.CallInfo.Response
	return &retval, nil
}

// The query executed by getTransactions.
const getTransactions_Operation = `
query getTransactions {
	transactions(filter: {message:{vm_param:{exec:{pkg_path:"gno.land/r/berty/social"}}},success:true}) {
		... CallInfo
	}
}
fragment CallInfo on Transaction {
	messages {
		value {
			__typename
			... on MsgCall {
				func
				caller
				args
			}
		}
	}
	response {
		data
	}
}
`

func getTransactions(
	ctx_ context.Context,
	client_ graphql.Client,
) (data_ *getTransactionsResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "getTransactions",
		Query:  getTransactions_Operation,
	}

	data_ = &getTransactionsResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The subscription executed by subscribeTransactions.
const subscribeTransactions_Operation = `
subscription subscribeTransactions {
	transactions(filter: {message:{vm_param:{exec:{pkg_path:"gno.land/r/berty/social"}}},success:true}) {
		... CallInfo
	}
}
fragment CallInfo on Transaction {
	messages {
		value {
			__typename
			... on MsgCall {
				func
				caller
				args
			}
		}
	}
	response {
		data
	}
}
`

// To unsubscribe, use [graphql.WebSocketClient.Unsubscribe]
func subscribeTransactions(
	ctx_ context.Context,
	client_ graphql.WebSocketClient,
) (dataChan_ chan subscribeTransactionsWsResponse, subscriptionID_ string, err_ error) {
	req_ := &graphql.Request{
		OpName: "subscribeTransactions",
		Query:  subscribeTransactions_Operation,
	}

	dataChan_ = make(chan subscribeTransactionsWsResponse)
	subscriptionID_, err_ = client_.Subscribe(req_, dataChan_, subscribeTransactionsForwardData)

	return dataChan_, subscriptionID_, err_
}

type subscribeTransactionsWsResponse struct {
	Data       *subscribeTransactionsResponse `json:"data"`
	Extensions map[string]interface{}         `json:"extensions,omitempty"`
	Errors     error                          `json:"errors"`
}

func subscribeTransactionsForwardData(interfaceChan interface{}, jsonRawMsg json.RawMessage) error {
	var gqlResp graphql.Response
	var wsResp subscribeTransactionsWsResponse
	err := json.Unmarshal(jsonRawMsg, &gqlResp)
	if err != nil {
		return err
	}
	if len(gqlResp.Errors) == 0 {
		err = json.Unmarshal(jsonRawMsg, &wsResp)
		if err != nil {
			return err
		}
	} else {
		wsResp.Errors = gqlResp.Errors
	}
	dataChan_, ok := interfaceChan.(chan subscribeTransactionsWsResponse)
	if !ok {
		return errors.New("failed to cast interface into 'chan subscribeTransactionsWsResponse'")
	}
	dataChan_ <- wsResp
	return nil
}
